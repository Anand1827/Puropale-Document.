Git Commands

1. Configuration Commands

git config
- Purpose: Configure Git settings at different levels (system, global, local).
- Usage:
  - git config --global user.name "Your Name"  (Sets user name globally)
  - git config --global user.email "your.email@example.com"  (Sets email globally)
  - git config --list  (Displays all configured settings)

2. Repository Initialization and Cloning

git init
- Purpose: Initializes a new Git repository in the current directory.
- Usage: git init

git clone
- Purpose: Creates a local copy of an existing remote repository.
- Usage: git clone <repository_url>

3. Staging and Committing Changes

git add
- Purpose: Stages changes for the next commit.
- Usage:
  - git add <file> (Stages a specific file)
  - git add . (Stages all changes in the directory)

git commit
- Purpose: Saves changes to the repository history.
- Usage:
  - git commit -m "Commit message" (Commits staged changes with a message)
  - git commit -am "Commit message" (Stages and commits changes in one step)

4. Branching and Merging

git branch
- Purpose: Lists, creates, or deletes branches.
- Usage:
  - git branch (Lists all branches)
  - git branch <branch_name> (Creates a new branch)
  - git branch -d <branch_name> (Deletes a branch)

git checkout
- Purpose: Switches between branches.
- Usage:
  - git checkout <branch_name> (Switches to an existing branch)
  - git checkout -b <new_branch> (Creates and switches to a new branch)

git merge
- Purpose: Merges changes from one branch into another.
- Usage: git merge <branch_name>

5. Remote Repositories

git remote
- Purpose: Manages remote repositories.
- Usage:
  - git remote -v (Lists remote repositories)
  - git remote add origin <url> (Adds a remote repository)

git push
- Purpose: Uploads local commits to a remote repository.
- Usage:
  - git push origin <branch_name> (Pushes changes to a specific branch)
  - git push -u origin <branch_name> (Sets upstream branch and pushes changes)

git pull
- Purpose: Fetches and merges changes from a remote repository.
- Usage: git pull origin <branch_name>

git fetch
- Purpose: Downloads updates from a remote repository without merging.
- Usage: git fetch origin

6. Viewing and Undoing Changes

git status
- Purpose: Displays the current status of the working directory and staging area.
- Usage: git status

git log
- Purpose: Shows commit history.
- Usage:
  - git log (Shows a list of past commits)
  - git log --oneline (Displays a condensed commit history)

git diff
- Purpose: Shows differences between changes.
- Usage:
  - git diff (Compares working directory and staging area)
  - git diff <branch1> <branch2> (Compares two branches)

git reset
- Purpose: Undoes changes in the working directory or staging area.
- Usage:
  - git reset HEAD <file> (Unstages a file but keeps changes)
  - git reset --hard HEAD (Resets the repository to the last commit, discarding changes)

git revert
- Purpose: Creates a new commit that undoes a previous commit.
- Usage: git revert <commit_id>

7. Stashing and Cleaning

git stash
- Purpose: Temporarily saves uncommitted changes.
- Usage:
  - git stash (Stashes changes)
  - git stash pop (Applies the last stashed changes and removes them from the stash list)

git clean
- Purpose: Removes untracked files.
- Usage: git clean -f (Deletes untracked files in the directory)

8. Tagging and Releases

git tag
- Purpose: Creates a reference to a specific commit.
- Usage:
  - git tag <tag_name> (Creates a lightweight tag)
  - git tag -a <tag_name> -m "Tag message" (Creates an annotated tag)

9. Advanced Commands

git rebase
- Purpose: Moves or combines commits onto another branch.
- Usage: git rebase <branch_name>

git cherry-pick
- Purpose: Applies a specific commit from another branch.
- Usage: git cherry-pick <commit_id>

git bisect
- Purpose: Finds the commit that introduced a bug.
- Usage:
  - git bisect start
  - git bisect bad (Marks the current commit as bad)
  - git bisect good <commit_id> (Marks a known good commit)

10. Help Commands

git help
- Purpose: Displays help information for any Git command.
- Usage: git help <command>

Conclusion
This document covers the most commonly used Git commands, providing essential knowledge for version control and collaboration.
